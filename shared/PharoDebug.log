THERE_BE_DRAGONS_HERE
Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
25 April 2018 5:25:57.395052 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60540]

FileHandle(Object)>>error:
	Receiver: a FileHandle
	Arguments and temporary variables: 
		aString: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global...etc...
	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>writeStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileSystem>>writeStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-...etc...
	Receiver's instance variables: 
		store: 	an UnixStore


FileReference>>writeStream
	Receiver: File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-identif...etc...


FileLocator>>writeStream
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


FileLocator(AbstractFileReference)>>writeStreamDo:
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 
		aBlock: 	[ :aPreferenceStream | self save: aDictionary into: aPreferenceStream ]...etc...
		stream: 	nil
	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>save:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		aDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>mayOverwrite:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		aDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


[ "Preferences likely contains a different settings version, so we store the actual one.
		We should keep the preferences as stable as possible." self mayOverwrite: existingDictionary ] in GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


BlockClosure>>cull:
	Receiver: [ "Preferences likely contains a different settings version, so we store the actual one.
	...etc...
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
25 April 2018 5:27:59.330237 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60540]

FileHandle(Object)>>error:
	Receiver: a FileHandle
	Arguments and temporary variables: 
		aString: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global...etc...
	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>writeStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileSystem>>writeStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-...etc...
	Receiver's instance variables: 
		store: 	an UnixStore


FileReference>>writeStream
	Receiver: File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-identif...etc...


FileLocator>>writeStream
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


FileLocator(AbstractFileReference)>>writeStreamDo:
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 
		aBlock: 	[ :aPreferenceStream | self save: aDictionary into: aPreferenceStream ]...etc...
		stream: 	nil
	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>save:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		aDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>mayOverwrite:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		aDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


[ "Preferences likely contains a different settings version, so we store the actual one.
		We should keep the preferences as stable as possible." self mayOverwrite: existingDictionary ] in GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


BlockClosure>>cull:
	Receiver: [ "Preferences likely contains a different settings version, so we store the actual one.
	...etc...
	Arguments and temporary variables: 
		anArg: 	Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.gl...etc...
	Receiver's instance variables: 
		outerContext: 	GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>loa...etc...
		startpc: 	150
		numArgs: 	0


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Error: Unable to open file File @ /home/alejo/.config/pharo/org.phar...etc...
		value: 	nil
	Receiver's instance variables: 
		sender: 	GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ (self mergeExisting: existingDictionary stored: self load)
	ifTrue:...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Error: Unable to open file File @ /home/alejo/.config/pharo/org.phar...etc...
	Receiver's instance variables: 
		sender: 	GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ (self mergeExisting: existingDictionary stored: self load)
	ifTrue:...etc...


Error(Exception)>>signal
	Receiver: Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.s...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.gl...etc...
		tag: 	nil
		signaler: 	a FileHandle
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


Error(Exception)>>signal:
	Receiver: Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.s...etc...
	Arguments and temporary variables: 
		signalerText: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.g...etc...
	Receiver's instance variables: 
		messageText: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.gl...etc...
		tag: 	nil
		signaler: 	a FileHandle
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


FileHandle(Object)>>error:
	Receiver: a FileHandle
	Arguments and temporary variables: 
		aString: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global...etc...
	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>writeStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileSystem>>writeStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-...etc...
	Receiver's instance variables: 
		store: 	an UnixStore


FileReference>>writeStream
	Receiver: File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-identif...etc...


FileLocator>>writeStream
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


FileLocator(AbstractFileReference)>>writeStreamDo:
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 
		aBlock: 	[ :aPreferenceStream | self save: aDictionary into: aPreferenceStream ]...etc...
		stream: 	nil
	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>save:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		aDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


[ (self mergeExisting: existingDictionary stored: self load)
	ifTrue: [ self save: existingDictionary ] ] in GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


BlockClosure>>on:do:
	Receiver: [ (self mergeExisting: existingDictionary stored: self load)
	ifTrue: [ self save: existin...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ "Preferences likely contains a different settings version, so ...etc...
	Receiver's instance variables: 
		outerContext: 	GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>loa...etc...
		startpc: 	132
		numArgs: 	0


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>ensure:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


GlobalIdentifier>>ensure
	Receiver: a GlobalIdentifier
	Arguments and temporary variables: 

	Receiver's instance variables: 
		persistenceStrategy: 	a GlobalIdentifierStonPersistence
		persistedInformation: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f7...etc...


GlobalIdentifier class>>initializeUniqueInstance
	Receiver: GlobalIdentifier
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#computerUUID->GlobalIdentifier>>#computerUUID #...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GlobalIdentifier
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Identification'
		traitComposition: 	{}
		localSelectors: 	nil
		uniqueInstance: 	a GlobalIdentifier


GlobalIdentifier class>>uniqueInstance
	Receiver: GlobalIdentifier
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#computerUUID->GlobalIdentifier>>#computerUUID #...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GlobalIdentifier
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Identification'
		traitComposition: 	{}
		localSelectors: 	nil
		uniqueInstance: 	a GlobalIdentifier


SystemSettingsPersistence class>>resumeSystemSettings
	Receiver: SystemSettingsPersistence
	Arguments and temporary variables: 
		thisComputerID: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allStoredSettings->SystemSettingsPersistence>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SystemSettingsPersistence
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Settings-Persistence-Ston-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		lastSettingsComputerID: 	'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'


THERE_BE_DRAGONS_HERE

25 April 2018 5:28:27.704342 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60540]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(69481728)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@88)
		owner: 	a TransformWithLayoutMorph(623384320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(819648000) a RubCursor(378661888...etc...
		fullBounds: 	(0@0) corner: (821@88)
		color: 	Color transparent
		extension: 	a MorphExtension (793033728) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(722096128)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(378661888)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(178@52)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(69481728)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@88)
		owner: 	a TransformWithLayoutMorph(623384320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(819648000) a RubCursor(378661888...etc...
		fullBounds: 	(0@0) corner: (821@88)
		color: 	Color transparent
		extension: 	a MorphExtension (793033728) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(722096128)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(378661888)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(178@52)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(69481728)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@88)
		owner: 	a TransformWithLayoutMorph(623384320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(819648000) a RubCursor(378661888...etc...
		fullBounds: 	(0@0) corner: (821@88)
		color: 	Color transparent
		extension: 	a MorphExtension (793033728) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(722096128)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(378661888)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(178@52)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(69481728)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@88)
		owner: 	a TransformWithLayoutMorph(623384320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(819648000) a RubCursor(378661888...etc...
		fullBounds: 	(0@0) corner: (821@88)
		color: 	Color transparent
		extension: 	a MorphExtension (793033728) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(722096128)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(378661888)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(178@52)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(69481728)
	Receiver's instance variables: 
		bounds: 	(845@100) corner: (861@116)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (798578432)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(845@100) mouseOver 12069 nil]
		targetOffset: 	(35.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12069 845 100 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(845@100) corner: (861@116)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (798578432)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(845@100) mouseOver 12069 nil]
		targetOffset: 	(35.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12069 845 100 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (976@665)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(708375552) a Sta...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (619615744) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(12163840))(a DropListM...etc...
		lastStepTime: 	12096
		lastStepMessage: 	nil
		lastCycleTime: 	12082
		alarms: 	a Heap()
		lastAlarmTime: 	12096
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (976@665)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(708375552) a Sta...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (619615744) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(708375552) a Sta...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (619615744) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-04-25T17:28:27.509514-03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-04-25T17:28:27.509514-03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-04-25T17:28:27.509514-03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-04-25T17:28:27.509514-03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-04-25T17:28:27.509514-03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-04-25T17:28:27.509514-03:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
WorldState class>>quitSession
WorldMorph(PasteUpMorph)>>windowEvent:
WorldMorph(Morph)>>handleWindowEvent:
WindowEvent>>sentTo:
WorldMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchWindowEvent:with:
MorphicEventDispatcher>>handleWindowEvent:
WindowEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
25 April 2018 5:28:27.981682 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60540]

FileHandle(Object)>>error:
	Receiver: a FileHandle
	Arguments and temporary variables: 
		aString: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global...etc...
	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>writeStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileSystem>>writeStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-...etc...
	Receiver's instance variables: 
		store: 	an UnixStore


FileReference>>writeStream
	Receiver: File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-identif...etc...


FileLocator>>writeStream
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


FileLocator(AbstractFileReference)>>writeStreamDo:
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 
		aBlock: 	[ :aPreferenceStream | self save: aDictionary into: aPreferenceStream ]...etc...
		stream: 	nil
	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>save:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		aDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>mayOverwrite:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		aDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


[ "Preferences likely contains a different settings version, so we store the actual one.
		We should keep the preferences as stable as possible." self mayOverwrite: existingDictionary ] in GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


BlockClosure>>cull:
	Receiver: [ "Preferences likely contains a different settings version, so we store the actual one.
	...etc...
	Arguments and temporary variables: 
		anArg: 	Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.gl...etc...
	Receiver's instance variables: 
		outerContext: 	GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>loa...etc...
		startpc: 	150
		numArgs: 	0


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Error: Unable to open file File @ /home/alejo/.config/pharo/org.phar...etc...
		value: 	nil
	Receiver's instance variables: 
		sender: 	GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ (self mergeExisting: existingDictionary stored: self load)
	ifTrue:...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Error: Unable to open file File @ /home/alejo/.config/pharo/org.phar...etc...
	Receiver's instance variables: 
		sender: 	GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ (self mergeExisting: existingDictionary stored: self load)
	ifTrue:...etc...


Error(Exception)>>signal
	Receiver: Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.s...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.gl...etc...
		tag: 	nil
		signaler: 	a FileHandle
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


Error(Exception)>>signal:
	Receiver: Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.s...etc...
	Arguments and temporary variables: 
		signalerText: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.g...etc...
	Receiver's instance variables: 
		messageText: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.gl...etc...
		tag: 	nil
		signaler: 	a FileHandle
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


FileHandle(Object)>>error:
	Receiver: a FileHandle
	Arguments and temporary variables: 
		aString: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global...etc...
	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>writeStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileSystem>>writeStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-...etc...
	Receiver's instance variables: 
		store: 	an UnixStore


FileReference>>writeStream
	Receiver: File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-identif...etc...


FileLocator>>writeStream
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


FileLocator(AbstractFileReference)>>writeStreamDo:
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 
		aBlock: 	[ :aPreferenceStream | self save: aDictionary into: aPreferenceStream ]...etc...
		stream: 	nil
	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>save:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		aDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


[ (self mergeExisting: existingDictionary stored: self load)
	ifTrue: [ self save: existingDictionary ] ] in GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


BlockClosure>>on:do:
	Receiver: [ (self mergeExisting: existingDictionary stored: self load)
	ifTrue: [ self save: existin...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ "Preferences likely contains a different settings version, so ...etc...
	Receiver's instance variables: 
		outerContext: 	GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>loa...etc...
		startpc: 	132
		numArgs: 	0


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>ensure:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


GlobalIdentifier>>ensure
	Receiver: a GlobalIdentifier
	Arguments and temporary variables: 

	Receiver's instance variables: 
		persistenceStrategy: 	a GlobalIdentifierStonPersistence
		persistedInformation: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f7...etc...


GlobalIdentifier class>>initializeUniqueInstance
	Receiver: GlobalIdentifier
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#computerUUID->GlobalIdentifier>>#computerUUID #...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GlobalIdentifier
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Identification'
		traitComposition: 	{}
		localSelectors: 	nil
		uniqueInstance: 	a GlobalIdentifier


GlobalIdentifier class>>uniqueInstance
	Receiver: GlobalIdentifier
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#computerUUID->GlobalIdentifier>>#computerUUID #...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GlobalIdentifier
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Identification'
		traitComposition: 	{}
		localSelectors: 	nil
		uniqueInstance: 	a GlobalIdentifier


SystemSettingsPersistence class>>resumeSystemSettings
	Receiver: SystemSettingsPersistence
	Arguments and temporary variables: 
		thisComputerID: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allStoredSettings->SystemSettingsPersistence>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SystemSettingsPersistence
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Settings-Persistence-Ston-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		lastSettingsComputerID: 	'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'


[ :persistence | persistence resumeSystemSettings ] in PharoCommandLineHandler>>runPreferences
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		persistence: 	SystemSettingsPersistence
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>cull:
	Receiver: [ :persistence | persistence resumeSystemSettings ]
	Arguments and temporary variables: 
		anArg: 	SystemSettingsPersistence
	Receiver's instance variables: 
		outerContext: 	PharoCommandLineHandler>>runPreferences
		startpc: 	87
		numArgs: 	1


SystemDictionary(Dictionary)>>at:ifPresent:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		key: 	#SystemSettingsPersistence
		aBlock: 	[ :persistence | persistence resumeSystemSettings ]
		assoc: 	#SystemSettingsPersistence->SystemSettingsPersistence
	Receiver's instance variables: 
		tally: 	6617
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AGroupContentHasBe...etc...
		cachedNonClassNames: 	an OrderedCollection(#ActiveEvent #ActiveHand #ActiveWorld...etc...


SmalltalkImage>>at:ifPresent:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		key: 	#SystemSettingsPersistence
		aBlock: 	[ :persistence | persistence resumeSystemSettings ]
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


PharoCommandLineHandler>>runPreferences
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler>>activate
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
	Receiver: PharoCommandLineHandler
	Arguments and temporary variables: 
		aCommandLine: 	a CommandLineArguments
	Receiver's instance variables: 
		superclass: 	BasicCommandLineHandler
		methodDict: 	a MethodDictionary(#activate->PharoCommandLineHandler>>#activate #c...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-CommandLineHandler'
		traitComposition: 	{}
		localSelectors: 	nil


[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
	Receiver: PharoCommandLineHandler
	Arguments and temporary variables: 
		aCommandLine: 	a CommandLineArguments
	Receiver's instance variables: 
		superclass: 	BasicCommandLineHandler
		methodDict: 	a MethodDictionary(#activate->PharoCommandLineHandler>>#activate #c...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-CommandLineHandler'
		traitComposition: 	{}
		localSelectors: 	nil



--- The full stack ---
FileHandle(Object)>>error:
FileHandle>>streamError
FileHandle>>writeStream
FileSystem>>writeStreamOn:
FileReference>>writeStream
FileLocator>>writeStream
FileLocator(AbstractFileReference)>>writeStreamDo:
GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>save:
GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>mayOverwrite:
[ "Preferences likely contains a different settings version, so we store the actual one.
		We should keep the preferences as stable as possible." self mayOverwrite: existingDictionary ] in GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
Error(Exception)>>signal
Error(Exception)>>signal:
FileHandle(Object)>>error:
FileHandle>>streamError
FileHandle>>writeStream
FileSystem>>writeStreamOn:
FileReference>>writeStream
FileLocator>>writeStream
FileLocator(AbstractFileReference)>>writeStreamDo:
GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>save:
[ (self mergeExisting: existingDictionary stored: self load)
	ifTrue: [ self save: existingDictionary ] ] in GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
BlockClosure>>on:do:
GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>ensure:
GlobalIdentifier>>ensure
GlobalIdentifier class>>initializeUniqueInstance
GlobalIdentifier class>>uniqueInstance
SystemSettingsPersistence class>>resumeSystemSettings
[ :persistence | persistence resumeSystemSettings ] in PharoCommandLineHandler>>runPreferences
BlockClosure>>cull:
SystemDictionary(Dictionary)>>at:ifPresent:
SmalltalkImage>>at:ifPresent:
PharoCommandLineHandler>>runPreferences
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 April 2018 5:28:54.286747 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60540]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(69481728)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@88)
		owner: 	a TransformWithLayoutMorph(623384320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(819648000) a RubCursor(378661888...etc...
		fullBounds: 	(0@0) corner: (821@88)
		color: 	Color transparent
		extension: 	a MorphExtension (793033728) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(722096128)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(378661888)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(178@52)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(69481728)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@88)
		owner: 	a TransformWithLayoutMorph(623384320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(819648000) a RubCursor(378661888...etc...
		fullBounds: 	(0@0) corner: (821@88)
		color: 	Color transparent
		extension: 	a MorphExtension (793033728) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(722096128)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(378661888)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(178@52)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(69481728)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@88)
		owner: 	a TransformWithLayoutMorph(623384320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(819648000) a RubCursor(378661888...etc...
		fullBounds: 	(0@0) corner: (821@88)
		color: 	Color transparent
		extension: 	a MorphExtension (793033728) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(722096128)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(378661888)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(178@52)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(69481728)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@88)
		owner: 	a TransformWithLayoutMorph(623384320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(819648000) a RubCursor(378661888...etc...
		fullBounds: 	(0@0) corner: (821@88)
		color: 	Color transparent
		extension: 	a MorphExtension (793033728) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(722096128)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(378661888)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(178@52)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(69481728)
	Receiver's instance variables: 
		bounds: 	(845@100) corner: (861@116)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (798578432)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(845@100) mouseOver 12069 nil]
		targetOffset: 	(35.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12069 845 100 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(845@100) corner: (861@116)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (798578432)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(845@100) mouseOver 12069 nil]
		targetOffset: 	(35.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12069 845 100 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (976@665)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(708375552) a Sta...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (619615744) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(12163840))(a DropListM...etc...
		lastStepTime: 	12096
		lastStepMessage: 	nil
		lastCycleTime: 	12082
		alarms: 	a Heap()
		lastAlarmTime: 	12096
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (976@665)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(708375552) a Sta...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (619615744) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(708375552) a Sta...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (619615744) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-04-25T17:28:54.198776-03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-04-25T17:28:54.198776-03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-04-25T17:28:54.198776-03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-04-25T17:28:54.198776-03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-04-25T17:28:54.198776-03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2018-04-25T17:28:54.198776-03:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
WorldState class>>quitSession
WorldMorph(PasteUpMorph)>>windowEvent:
WorldMorph(Morph)>>handleWindowEvent:
WindowEvent>>sentTo:
WorldMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchWindowEvent:with:
MorphicEventDispatcher>>handleWindowEvent:
WindowEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
25 April 2018 5:28:54.357661 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60540]

FileHandle(Object)>>error:
	Receiver: a FileHandle
	Arguments and temporary variables: 
		aString: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global...etc...
	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>writeStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileSystem>>writeStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-...etc...
	Receiver's instance variables: 
		store: 	an UnixStore


FileReference>>writeStream
	Receiver: File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-identif...etc...


FileLocator>>writeStream
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


FileLocator(AbstractFileReference)>>writeStreamDo:
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 
		aBlock: 	[ :aPreferenceStream | self save: aDictionary into: aPreferenceStream ]...etc...
		stream: 	nil
	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>save:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		aDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>mayOverwrite:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		aDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


[ "Preferences likely contains a different settings version, so we store the actual one.
		We should keep the preferences as stable as possible." self mayOverwrite: existingDictionary ] in GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


BlockClosure>>cull:
	Receiver: [ "Preferences likely contains a different settings version, so we store the actual one.
	...etc...
	Arguments and temporary variables: 
		anArg: 	Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.gl...etc...
	Receiver's instance variables: 
		outerContext: 	GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>loa...etc...
		startpc: 	150
		numArgs: 	0


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Error: Unable to open file File @ /home/alejo/.config/pharo/org.phar...etc...
		value: 	nil
	Receiver's instance variables: 
		sender: 	GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ (self mergeExisting: existingDictionary stored: self load)
	ifTrue:...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Error: Unable to open file File @ /home/alejo/.config/pharo/org.phar...etc...
	Receiver's instance variables: 
		sender: 	GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ (self mergeExisting: existingDictionary stored: self load)
	ifTrue:...etc...


Error(Exception)>>signal
	Receiver: Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.s...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.gl...etc...
		tag: 	nil
		signaler: 	a FileHandle
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


Error(Exception)>>signal:
	Receiver: Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.s...etc...
	Arguments and temporary variables: 
		signalerText: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.g...etc...
	Receiver's instance variables: 
		messageText: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.gl...etc...
		tag: 	nil
		signaler: 	a FileHandle
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


FileHandle(Object)>>error:
	Receiver: a FileHandle
	Arguments and temporary variables: 
		aString: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global...etc...
	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>writeStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileSystem>>writeStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-...etc...
	Receiver's instance variables: 
		store: 	an UnixStore


FileReference>>writeStream
	Receiver: File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-identif...etc...


FileLocator>>writeStream
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


FileLocator(AbstractFileReference)>>writeStreamDo:
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 
		aBlock: 	[ :aPreferenceStream | self save: aDictionary into: aPreferenceStream ]...etc...
		stream: 	nil
	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>save:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		aDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


[ (self mergeExisting: existingDictionary stored: self load)
	ifTrue: [ self save: existingDictionary ] ] in GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


BlockClosure>>on:do:
	Receiver: [ (self mergeExisting: existingDictionary stored: self load)
	ifTrue: [ self save: existin...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ "Preferences likely contains a different settings version, so ...etc...
	Receiver's instance variables: 
		outerContext: 	GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>loa...etc...
		startpc: 	132
		numArgs: 	0


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>ensure:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


GlobalIdentifier>>ensure
	Receiver: a GlobalIdentifier
	Arguments and temporary variables: 

	Receiver's instance variables: 
		persistenceStrategy: 	a GlobalIdentifierStonPersistence
		persistedInformation: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f7...etc...


GlobalIdentifier class>>initializeUniqueInstance
	Receiver: GlobalIdentifier
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#computerUUID->GlobalIdentifier>>#computerUUID #...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GlobalIdentifier
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Identification'
		traitComposition: 	{}
		localSelectors: 	nil
		uniqueInstance: 	a GlobalIdentifier


GlobalIdentifier class>>uniqueInstance
	Receiver: GlobalIdentifier
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#computerUUID->GlobalIdentifier>>#computerUUID #...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GlobalIdentifier
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Identification'
		traitComposition: 	{}
		localSelectors: 	nil
		uniqueInstance: 	a GlobalIdentifier


SystemSettingsPersistence class>>resumeSystemSettings
	Receiver: SystemSettingsPersistence
	Arguments and temporary variables: 
		thisComputerID: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allStoredSettings->SystemSettingsPersistence>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SystemSettingsPersistence
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Settings-Persistence-Ston-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		lastSettingsComputerID: 	'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'


[ :persistence | persistence resumeSystemSettings ] in PharoCommandLineHandler>>runPreferences
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		persistence: 	SystemSettingsPersistence
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>cull:
	Receiver: [ :persistence | persistence resumeSystemSettings ]
	Arguments and temporary variables: 
		anArg: 	SystemSettingsPersistence
	Receiver's instance variables: 
		outerContext: 	PharoCommandLineHandler>>runPreferences
		startpc: 	87
		numArgs: 	1


SystemDictionary(Dictionary)>>at:ifPresent:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		key: 	#SystemSettingsPersistence
		aBlock: 	[ :persistence | persistence resumeSystemSettings ]
		assoc: 	#SystemSettingsPersistence->SystemSettingsPersistence
	Receiver's instance variables: 
		tally: 	6617
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AGroupContentHasBe...etc...
		cachedNonClassNames: 	an OrderedCollection(#ActiveEvent #ActiveHand #ActiveWorld...etc...


SmalltalkImage>>at:ifPresent:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		key: 	#SystemSettingsPersistence
		aBlock: 	[ :persistence | persistence resumeSystemSettings ]
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


PharoCommandLineHandler>>runPreferences
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler>>activate
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
	Receiver: PharoCommandLineHandler
	Arguments and temporary variables: 
		aCommandLine: 	a CommandLineArguments
	Receiver's instance variables: 
		superclass: 	BasicCommandLineHandler
		methodDict: 	a MethodDictionary(#activate->PharoCommandLineHandler>>#activate #c...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-CommandLineHandler'
		traitComposition: 	{}
		localSelectors: 	nil


[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
	Receiver: PharoCommandLineHandler
	Arguments and temporary variables: 
		aCommandLine: 	a CommandLineArguments
	Receiver's instance variables: 
		superclass: 	BasicCommandLineHandler
		methodDict: 	a MethodDictionary(#activate->PharoCommandLineHandler>>#activate #c...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-CommandLineHandler'
		traitComposition: 	{}
		localSelectors: 	nil



--- The full stack ---
FileHandle(Object)>>error:
FileHandle>>streamError
FileHandle>>writeStream
FileSystem>>writeStreamOn:
FileReference>>writeStream
FileLocator>>writeStream
FileLocator(AbstractFileReference)>>writeStreamDo:
GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>save:
GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>mayOverwrite:
[ "Preferences likely contains a different settings version, so we store the actual one.
		We should keep the preferences as stable as possible." self mayOverwrite: existingDictionary ] in GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
Error(Exception)>>signal
Error(Exception)>>signal:
FileHandle(Object)>>error:
FileHandle>>streamError
FileHandle>>writeStream
FileSystem>>writeStreamOn:
FileReference>>writeStream
FileLocator>>writeStream
FileLocator(AbstractFileReference)>>writeStreamDo:
GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>save:
[ (self mergeExisting: existingDictionary stored: self load)
	ifTrue: [ self save: existingDictionary ] ] in GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
BlockClosure>>on:do:
GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>ensure:
GlobalIdentifier>>ensure
GlobalIdentifier class>>initializeUniqueInstance
GlobalIdentifier class>>uniqueInstance
SystemSettingsPersistence class>>resumeSystemSettings
[ :persistence | persistence resumeSystemSettings ] in PharoCommandLineHandler>>runPreferences
BlockClosure>>cull:
SystemDictionary(Dictionary)>>at:ifPresent:
SmalltalkImage>>at:ifPresent:
PharoCommandLineHandler>>runPreferences
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: File @ /home/alejo/Pharo6.1-64-linux/pharo6.1-64/shared/pharo-local/ombu-sessions/Pharo.60uatq4s0v86r9miamabxxls8.ombu
25 April 2018 5:34:11.209513 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60540]

FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/Pharo6.1-64-linux/pharo6.1-64/shared/pharo-local/...etc...
		writable: 	true
		id: 	nil


FileHandle>>writeStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/Pharo6.1-64-linux/pharo6.1-64/shared/pharo-local/...etc...
		writable: 	true
		id: 	nil


FileSystem>>writeStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path * 'pharo-local' / 'ombu-sessions' / 'Pharo.60uatq4s0v86r9miam...etc...
	Receiver's instance variables: 
		store: 	an UnixStore


FileReference>>writeStream
	Receiver: File @ pharo-local/ombu-sessions/Pharo.60uatq4s0v86r9miamabxxls8.ombu
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'pharo-local' / 'ombu-sessions' / 'Pharo.60uatq4s0v86r9miamabxxls8...etc...


FileReference(AbstractFileReference)>>writeStreamDo:
	Receiver: File @ pharo-local/ombu-sessions/Pharo.60uatq4s0v86r9miamabxxls8.ombu
	Arguments and temporary variables: 
		aBlock: 	[ :fileStream | 
fileStream setToEnd.
initialPosition := fileStream pos...etc...
		stream: 	nil
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'pharo-local' / 'ombu-sessions' / 'Pharo.60uatq4s0v86r9miamabxxls8...etc...


[ | initialPosition initialLocalName |
self entryBuffer isEmpty
	ifTrue: [ ^ self ].
fileReference
	writeStreamDo: [ :fileStream | 
		fileStream setToEnd.
		initialPosition := fileStream position.
		initialLocalName := self entryBuffer first value.
		ZnBufferedWriteStream
			on: fileStream
			do: [ :aWriteStream | 
				| anEntryWriter |
				anEntryWriter := self newEntryWriter.
				[ self entryBuffer isEmpty ]
					whileFalse: [ | next entry |
						next := self entryBuffer removeFirst.
						entry := next key.

						"Write entry to file"
						anEntryWriter on: aWriteStream nextEntryPut: entry ] ].

		"In Linux it was necessary to explicitely flush the file stream"
		fileStream flush.
		lastStreamPosition := fileStream size ].
self
	refreshEntryPositionsByLocalNameStartingAt: initialPosition
	since: initialLocalName ] in OmBlockFileStore(OmFileStore)>>flushEntryBuffer
	Receiver: an OmBlockFileStore(Pharo.60uatq4s0v86r9miamabxxls8)
	Arguments and temporary variables: 
		initialPosition: 	nil
		initialLocalName: 	nil
	Receiver's instance variables: 
		globalName: 	'Pharo.60uatq4s0v86r9miamabxxls8'
		headReference: 	an OmReference(Pharo.60uatq4s0v86r9miamabxxls8:2)
		fileReference: 	File @ pharo-local/ombu-sessions/Pharo.60uatq4s0v86r9miamabxxls8...etc...
		entryPositionsByLocalName: 	a Dictionary()
		entryCount: 	2
		entryReader: 	nil
		writingDeferrer: 	an OmDeferrer
		entryByLocalName: 	a WeakValueDictionary('1'->an OmEntry(an EpCategoryAddition) ...etc...
		mustRefresh: 	false
		entryBuffer: 	an OrderedCollection(an OmEntry(an EpCategoryAddition)->'1' an OmE...etc...
		lock: 	a Semaphore()
		lastStreamPosition: 	nil
		blocks: 	an OrderedCollection(an OmBlock(first entry: 1 positions: 0..131071))


[ caught := true.
self wait.
blockValue := mutuallyExcludedBlock value ] in Semaphore>>critical:
	Receiver: a Semaphore()
	Arguments and temporary variables: 
		mutuallyExcludedBlock: 	[ | initialPosition initialLocalName |
self entryBuffer ...etc...
		caught: 	true
		blockValue: 	nil
	Receiver's instance variables: 
		firstLink: 	nil
		lastLink: 	nil
		excessSignals: 	0


BlockClosure>>ensure:
	Receiver: [ caught := true.
self wait.
blockValue := mutuallyExcludedBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ caught
	ifTrue: [ self signal ] ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Semaphore>>critical:
		startpc: 	70
		numArgs: 	0


Semaphore>>critical:
	Receiver: a Semaphore()
	Arguments and temporary variables: 
		caught: 	true
		blockValue: 	nil
		mutuallyExcludedBlock: 	[ | initialPosition initialLocalName |
self entryBuffer ...etc...
	Receiver's instance variables: 
		firstLink: 	nil
		lastLink: 	nil
		excessSignals: 	0


OmBlockFileStore(OmFileStore)>>critical:
	Receiver: an OmBlockFileStore(Pharo.60uatq4s0v86r9miamabxxls8)
	Arguments and temporary variables: 
		aBlock: 	[ | initialPosition initialLocalName |
self entryBuffer isEmpty
	ifTrue...etc...
	Receiver's instance variables: 
		globalName: 	'Pharo.60uatq4s0v86r9miamabxxls8'
		headReference: 	an OmReference(Pharo.60uatq4s0v86r9miamabxxls8:2)
		fileReference: 	File @ pharo-local/ombu-sessions/Pharo.60uatq4s0v86r9miamabxxls8...etc...
		entryPositionsByLocalName: 	a Dictionary()
		entryCount: 	2
		entryReader: 	nil
		writingDeferrer: 	an OmDeferrer
		entryByLocalName: 	a WeakValueDictionary('1'->an OmEntry(an EpCategoryAddition) ...etc...
		mustRefresh: 	false
		entryBuffer: 	an OrderedCollection(an OmEntry(an EpCategoryAddition)->'1' an OmE...etc...
		lock: 	a Semaphore()
		lastStreamPosition: 	nil
		blocks: 	an OrderedCollection(an OmBlock(first entry: 1 positions: 0..131071))


OmBlockFileStore(OmFileStore)>>flushEntryBuffer
	Receiver: an OmBlockFileStore(Pharo.60uatq4s0v86r9miamabxxls8)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globalName: 	'Pharo.60uatq4s0v86r9miamabxxls8'
		headReference: 	an OmReference(Pharo.60uatq4s0v86r9miamabxxls8:2)
		fileReference: 	File @ pharo-local/ombu-sessions/Pharo.60uatq4s0v86r9miamabxxls8...etc...
		entryPositionsByLocalName: 	a Dictionary()
		entryCount: 	2
		entryReader: 	nil
		writingDeferrer: 	an OmDeferrer
		entryByLocalName: 	a WeakValueDictionary('1'->an OmEntry(an EpCategoryAddition) ...etc...
		mustRefresh: 	false
		entryBuffer: 	an OrderedCollection(an OmEntry(an EpCategoryAddition)->'1' an OmE...etc...
		lock: 	a Semaphore()
		lastStreamPosition: 	nil
		blocks: 	an OrderedCollection(an OmBlock(first entry: 1 positions: 0..131071))


OmDeferrer>>sendMessage
	Receiver: an OmDeferrer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		process: 	a Process in nil
		lastSchedule: 	2018-04-25T17:34:10.70402-03:00
		duration: 	0:00:00:00.25
		selector: 	#flushEntryBuffer
		object: 	an OmBlockFileStore(Pharo.60uatq4s0v86r9miamabxxls8)


[ self sendMessage ] in OmDeferrer>>flush
	Receiver: an OmDeferrer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		process: 	a Process in nil
		lastSchedule: 	2018-04-25T17:34:10.70402-03:00
		duration: 	0:00:00:00.25
		selector: 	#flushEntryBuffer
		object: 	an OmBlockFileStore(Pharo.60uatq4s0v86r9miamabxxls8)


BlockClosure>>ensure:
	Receiver: [ self sendMessage ]
	Arguments and temporary variables: 
		aBlock: 	[ process := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OmDeferrer>>flush
		startpc: 	58
		numArgs: 	0


OmDeferrer>>flush
	Receiver: an OmDeferrer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		process: 	a Process in nil
		lastSchedule: 	2018-04-25T17:34:10.70402-03:00
		duration: 	0:00:00:00.25
		selector: 	#flushEntryBuffer
		object: 	an OmBlockFileStore(Pharo.60uatq4s0v86r9miamabxxls8)


[ "Loop until enough time passed since last #schedule"
[ DateAndTime now < (lastSchedule + duration) ]
	whileTrue: [ duration wait ].

"Execute deferred action (if not flushed before) and clean up"
self flush ] in OmDeferrer>>runMessageProcess
	Receiver: an OmDeferrer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		process: 	a Process in nil
		lastSchedule: 	2018-04-25T17:34:10.70402-03:00
		duration: 	0:00:00:00.25
		selector: 	#flushEntryBuffer
		object: 	an OmBlockFileStore(Pharo.60uatq4s0v86r9miamabxxls8)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ "Loop until enough time passed since last #schedule"
[ DateAndTime now < (lastSchedule +...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	OmDeferrer>>runMessageProcess
		startpc: 	77
		numArgs: 	0



--- The full stack ---
FileHandle>>streamError
FileHandle>>writeStream
FileSystem>>writeStreamOn:
FileReference>>writeStream
FileReference(AbstractFileReference)>>writeStreamDo:
[ | initialPosition initialLocalName |
self entryBuffer isEmpty
	ifTrue: [ ^ self ].
fileReference
	writeStreamDo: [ :fileStream | 
		fileStream setToEnd.
		initialPosition := fileStream position.
		initialLocalName := self entryBuffer first value.
		ZnBufferedWriteStream
			on: fileStream
			do: [ :aWriteStream | 
				| anEntryWriter |
				anEntryWriter := self newEntryWriter.
				[ self entryBuffer isEmpty ]
					whileFalse: [ | next entry |
						next := self entryBuffer removeFirst.
						entry := next key.

						"Write entry to file"
						anEntryWriter on: aWriteStream nextEntryPut: entry ] ].

		"In Linux it was necessary to explicitely flush the file stream"
		fileStream flush.
		lastStreamPosition := fileStream size ].
self
	refreshEntryPositionsByLocalNameStartingAt: initialPosition
	since: initialLocalName ] in OmBlockFileStore(OmFileStore)>>flushEntryBuffer
[ caught := true.
self wait.
blockValue := mutuallyExcludedBlock value ] in Semaphore>>critical:
BlockClosure>>ensure:
Semaphore>>critical:
OmBlockFileStore(OmFileStore)>>critical:
OmBlockFileStore(OmFileStore)>>flushEntryBuffer
OmDeferrer>>sendMessage
[ self sendMessage ] in OmDeferrer>>flush
BlockClosure>>ensure:
OmDeferrer>>flush
[ "Loop until enough time passed since last #schedule"
[ DateAndTime now < (lastSchedule + duration) ]
	whileTrue: [ duration wait ].

"Execute deferred action (if not flushed before) and clean up"
self flush ] in OmDeferrer>>runMessageProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
25 April 2018 5:40:36.534066 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60540]

FileHandle(Object)>>error:
	Receiver: a FileHandle
	Arguments and temporary variables: 
		aString: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global...etc...
	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>writeStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileSystem>>writeStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-...etc...
	Receiver's instance variables: 
		store: 	an UnixStore


FileReference>>writeStream
	Receiver: File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-identif...etc...


FileLocator>>writeStream
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


FileLocator(AbstractFileReference)>>writeStreamDo:
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 
		aBlock: 	[ :aPreferenceStream | self save: aDictionary into: aPreferenceStream ]...etc...
		stream: 	nil
	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>save:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		aDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>mayOverwrite:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		aDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


[ "Preferences likely contains a different settings version, so we store the actual one.
		We should keep the preferences as stable as possible." self mayOverwrite: existingDictionary ] in GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


BlockClosure>>cull:
	Receiver: [ "Preferences likely contains a different settings version, so we store the actual one.
	...etc...
	Arguments and temporary variables: 
		anArg: 	Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.gl...etc...
	Receiver's instance variables: 
		outerContext: 	GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>loa...etc...
		startpc: 	150
		numArgs: 	0


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Error: Unable to open file File @ /home/alejo/.config/pharo/org.phar...etc...
		value: 	nil
	Receiver's instance variables: 
		sender: 	GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ (self mergeExisting: existingDictionary stored: self load)
	ifTrue:...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Error: Unable to open file File @ /home/alejo/.config/pharo/org.phar...etc...
	Receiver's instance variables: 
		sender: 	GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ (self mergeExisting: existingDictionary stored: self load)
	ifTrue:...etc...


Error(Exception)>>signal
	Receiver: Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.s...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.gl...etc...
		tag: 	nil
		signaler: 	a FileHandle
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


Error(Exception)>>signal:
	Receiver: Error: Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.s...etc...
	Arguments and temporary variables: 
		signalerText: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.g...etc...
	Receiver's instance variables: 
		messageText: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.gl...etc...
		tag: 	nil
		signaler: 	a FileHandle
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


FileHandle(Object)>>error:
	Receiver: a FileHandle
	Arguments and temporary variables: 
		aString: 	'Unable to open file File @ /home/alejo/.config/pharo/org.pharo.global...etc...
	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileHandle>>writeStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
		writable: 	true
		id: 	nil


FileSystem>>writeStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-...etc...
	Receiver's instance variables: 
		store: 	an UnixStore


FileReference>>writeStream
	Receiver: File @ /home/alejo/.config/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'alejo' / '.config' / 'pharo' / 'org.pharo.global-identif...etc...


FileLocator>>writeStream
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 

	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


FileLocator(AbstractFileReference)>>writeStreamDo:
	Receiver: {preferences}/pharo/org.pharo.global-identifiers.ston
	Arguments and temporary variables: 
		aBlock: 	[ :aPreferenceStream | self save: aDictionary into: aPreferenceStream ]...etc...
		stream: 	nil
	Receiver's instance variables: 
		origin: 	#preferences
		path: 	Path * 'pharo' / 'org.pharo.global-identifiers.ston'


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>save:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		aDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70cd6053a'...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


[ (self mergeExisting: existingDictionary stored: self load)
	ifTrue: [ self save: existingDictionary ] ] in GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


BlockClosure>>on:do:
	Receiver: [ (self mergeExisting: existingDictionary stored: self load)
	ifTrue: [ self save: existin...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ "Preferences likely contains a different settings version, so ...etc...
	Receiver's instance variables: 
		outerContext: 	GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>loa...etc...
		startpc: 	132
		numArgs: 	0


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>ensure:
	Receiver: a GlobalIdentifierStonPersistence
	Arguments and temporary variables: 
		existingDictionary: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f70c...etc...
	Receiver's instance variables: 
		preferences: 	{preferences}/pharo/org.pharo.global-identifiers.ston
		previousPersistence: 	a GlobalIdentifierFuelPersistence
		checker: 	a GlobalIdentifierPersistenceChecker


GlobalIdentifier>>ensure
	Receiver: a GlobalIdentifier
	Arguments and temporary variables: 

	Receiver's instance variables: 
		persistenceStrategy: 	a GlobalIdentifierStonPersistence
		persistedInformation: 	a Dictionary(#computerUUID->'4dfee8ba-fa25-0d00-84b3-b7f7...etc...


GlobalIdentifier class>>initializeUniqueInstance
	Receiver: GlobalIdentifier
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#computerUUID->GlobalIdentifier>>#computerUUID #...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GlobalIdentifier
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Identification'
		traitComposition: 	{}
		localSelectors: 	nil
		uniqueInstance: 	a GlobalIdentifier


GlobalIdentifier class>>uniqueInstance
	Receiver: GlobalIdentifier
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#computerUUID->GlobalIdentifier>>#computerUUID #...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GlobalIdentifier
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Identification'
		traitComposition: 	{}
		localSelectors: 	nil
		uniqueInstance: 	a GlobalIdentifier


SystemSettingsPersistence class>>resumeSystemSettings
	Receiver: SystemSettingsPersistence
	Arguments and temporary variables: 
		thisComputerID: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allStoredSettings->SystemSettingsPersistence>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SystemSettingsPersistence
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Settings-Persistence-Ston-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		lastSettingsComputerID: 	nil


[ :persistence | persistence resumeSystemSettings ] in PharoCommandLineHandler>>runPreferences
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		persistence: 	SystemSettingsPersistence
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>cull:
	Receiver: [ :persistence | persistence resumeSystemSettings ]
	Arguments and temporary variables: 
		anArg: 	SystemSettingsPersistence
	Receiver's instance variables: 
		outerContext: 	PharoCommandLineHandler>>runPreferences
		startpc: 	87
		numArgs: 	1


SystemDictionary(Dictionary)>>at:ifPresent:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		key: 	#SystemSettingsPersistence
		aBlock: 	[ :persistence | persistence resumeSystemSettings ]
		assoc: 	#SystemSettingsPersistence->SystemSettingsPersistence
	Receiver's instance variables: 
		tally: 	6616
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	nil
		cachedNonClassNames: 	nil


SmalltalkImage>>at:ifPresent:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		key: 	#SystemSettingsPersistence
		aBlock: 	[ :persistence | persistence resumeSystemSettings ]
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


PharoCommandLineHandler>>runPreferences
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler>>activate
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
	Receiver: PharoCommandLineHandler
	Arguments and temporary variables: 
		aCommandLine: 	a CommandLineArguments
	Receiver's instance variables: 
		superclass: 	BasicCommandLineHandler
		methodDict: 	a MethodDictionary(#activate->PharoCommandLineHandler>>#activate #c...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-CommandLineHandler'
		traitComposition: 	{}
		localSelectors: 	nil


[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
	Receiver: PharoCommandLineHandler
	Arguments and temporary variables: 
		aCommandLine: 	a CommandLineArguments
	Receiver's instance variables: 
		superclass: 	BasicCommandLineHandler
		methodDict: 	a MethodDictionary(#activate->PharoCommandLineHandler>>#activate #c...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-CommandLineHandler'
		traitComposition: 	{}
		localSelectors: 	nil



--- The full stack ---
FileHandle(Object)>>error:
FileHandle>>streamError
FileHandle>>writeStream
FileSystem>>writeStreamOn:
FileReference>>writeStream
FileLocator>>writeStream
FileLocator(AbstractFileReference)>>writeStreamDo:
GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>save:
GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>mayOverwrite:
[ "Preferences likely contains a different settings version, so we store the actual one.
		We should keep the preferences as stable as possible." self mayOverwrite: existingDictionary ] in GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
Error(Exception)>>signal
Error(Exception)>>signal:
FileHandle(Object)>>error:
FileHandle>>streamError
FileHandle>>writeStream
FileSystem>>writeStreamOn:
FileReference>>writeStream
FileLocator>>writeStream
FileLocator(AbstractFileReference)>>writeStreamDo:
GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>save:
[ (self mergeExisting: existingDictionary stored: self load)
	ifTrue: [ self save: existingDictionary ] ] in GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
BlockClosure>>on:do:
GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>load:
GlobalIdentifierStonPersistence(GlobalIdentifierPersistence)>>ensure:
GlobalIdentifier>>ensure
GlobalIdentifier class>>initializeUniqueInstance
GlobalIdentifier class>>uniqueInstance
SystemSettingsPersistence class>>resumeSystemSettings
[ :persistence | persistence resumeSystemSettings ] in PharoCommandLineHandler>>runPreferences
BlockClosure>>cull:
SystemDictionary(Dictionary)>>at:ifPresent:
SmalltalkImage>>at:ifPresent:
PharoCommandLineHandler>>runPreferences
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

