'From Pharo6.0 of 13 May 2016 [Latest update: #60510] on 22 September 2017 at 12:58:31.792542 pm'!OTFRobot subclass: #WalkingBrushRobot	instanceVariableNames: 'battery brush'	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Robots'!!WalkingBrushRobot commentStamp: '<historical>' prior: 0!I am a robot and I am able to do simple things like move through a certain space, leaving marks of the paths I am doing. I have a battery that consumes itself according to my moves, and can be recharged at every moment.!!WalkingBrushRobot methodsFor: 'direction' stamp: 'Alejo 9/15/2017 12:54'!southWest	self direction: 225.! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 7/7/2014 23:45'!north	self direction: 0! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 10/4/2016 09:39'!direction: aDirection	"aDirection should be 0, 45, 90, 135, 180, 225, 270, 315 or its multiples"	(self battery canConsume: 1)		ifTrue: [ (aDirection isDivisibleBy: 45)				ifTrue: [ self setDirection: aDirection % 360 ] ]		ifFalse: [ ChargeBatteryError signal ]! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 7/8/2014 13:14'!direction	^ self directionMap keyAtValue: self heading! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'Alejo 9/15/2017 12:55'!northWest	self direction: 315.! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 7/7/2014 23:45'!west	self direction: 270! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 7/7/2014 23:45'!south	self direction: 180! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 7/7/2014 23:44'!east	self direction: 90! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 10/4/2016 09:39'!quarter	self direction: (self direction + 90) % 360! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'Alejo 9/15/2017 12:53'!southEast	self direction: 135! !!WalkingBrushRobot methodsFor: 'private' stamp: 'federicobalaguer 8/22/2017 17:54'!state: aState	brush := aState! !!WalkingBrushRobot methodsFor: 'private' stamp: 'federicobalaguer 8/12/2014 16:05'!setBrushCommand: aBlock	self addCommand: (OTFCommand actionBlock: aBlock)! !!WalkingBrushRobot methodsFor: 'private' stamp: 'federicobalaguer 8/23/2017 14:20'!handleStep: aDistance	brush tracePosition.	self battery consume: aDistance! !!WalkingBrushRobot methodsFor: 'private' stamp: 'federicobalaguer 8/22/2017 17:54'!state	^ brush! !!WalkingBrushRobot methodsFor: 'as yet unclassified' stamp: 'Alejo 9/15/2017 12:51'!northEast	self direction: 45! !!WalkingBrushRobot methodsFor: 'as yet unclassified' stamp: 'Alejo 9/15/2017 13:50'!dash: unaDistancia	unaDistancia//2 timesRepeat: [ 		self trace:1.		self move:2.				 ]! !!WalkingBrushRobot methodsFor: 'as yet unclassified' stamp: 'Alejo 9/15/2017 13:53'!dash: unaDistancia spacing: ancho	unaDistancia//2 timesRepeat: [ 		self trace:1.		self move:ancho.				 ]! !!WalkingBrushRobot methodsFor: 'printing' stamp: 'federicobalaguer 9/6/2016 18:20'!printOn: aStream	aStream		nextPutAll: 'Robot at ';		nextPutAll: self position printString;		nextPutAll: ', direction ';		nextPutAll: self direction printString! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'federicobalaguer 9/6/2016 18:10'!move: aDistance	(self battery canConsume: aDistance)		ifTrue: [ self setStepsToGo: aDistance ]		ifFalse: [ ChargeBatteryError signal ]! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'Alejo 9/15/2017 13:48'!trace: unaDistancia	self brushDown.	self move: unaDistancia - 1.	self brushUp.		! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'federicobalaguer 7/8/2014 15:14'!position	^ self body position! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'federicobalaguer 9/6/2016 18:10'!position: aPoint	(self battery canConsume: 1)		ifTrue: [ self addCommand: (OTFCommand actionBlock: [ self jumpTo: aPoint ] times: 1) ]		ifFalse: [ ChargeBatteryError signal ]! !!WalkingBrushRobot methodsFor: 'battery' stamp: 'NahuelGarbezza 12/9/2012 18:21'!battery: aBattery	battery := aBattery! !!WalkingBrushRobot methodsFor: 'battery' stamp: 'NahuelGarbezza 12/9/2012 18:21'!battery	^ battery! !!WalkingBrushRobot methodsFor: 'brush' stamp: 'geruiz 9/4/2017 19:21'!brushUp	(self battery canConsume: 1)		ifTrue: [ brush goUp ]		ifFalse: [ ChargeBatteryError signal ]! !!WalkingBrushRobot methodsFor: 'brush' stamp: 'geruiz 9/4/2017 19:21'!brushDown	(self battery canConsume: 1)		ifTrue: [ brush goDown ]		ifFalse: [ ChargeBatteryError signal ]! !!WalkingBrushRobot methodsFor: 'brush' stamp: 'gbosetti 8/27/2017 19:58'!isBrushUp	^brush isUp! !!WalkingBrushRobot methodsFor: 'brush' stamp: 'gbosetti 8/27/2017 19:58'!isBrushDown	^brush isDown! !!WalkingBrushRobot methodsFor: 'initialize-release' stamp: 'geruiz 9/4/2017 19:20'!initialize	super initialize.	brush := Brush forRobot: self.	self headingFromDirection: 0.	^ self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WalkingBrushRobot class	instanceVariableNames: ''!!WalkingBrushRobot class methodsFor: 'instance creation' stamp: 'federicobalaguer 7/11/2014 15:00'!withoutBattery	^ self new		battery: EndlessBattery new;		yourself! !!WalkingBrushRobot class methodsFor: 'instance creation' stamp: 'federicobalaguer 7/11/2014 19:37'!newWithPosition: aPosition	^ self new		position: aPosition;		battery: Battery fullyCharged;		yourself! !!WalkingBrushRobot class methodsFor: 'instance creation' stamp: 'federicobalaguer 7/11/2014 19:37'!withBattery	^ self new		battery: Battery fullyCharged ;		yourself! !