TestCase subclass: #TestDelaunayElement	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'DelaunayTriangulation-Test'!!TestDelaunayElement commentStamp: '<historical>' prior: 0!!!TestDelaunayElement methodsFor: 'testing' stamp: 'federicobalaguer 10/15/2014 09:12'!testThreeTriangle	| triangle |	triangle := DelaunayElement withPoints: (OrderedCollection with: 1 @ 1 with: 1 @ 2 with: 3 @ 0).	self should: [ triangle area closeTo: 0.999999999999999 ].	self should: [ triangle perimeter closeTo: 6.06449510224598 ]! !!TestDelaunayElement methodsFor: 'testing' stamp: 'federicobalaguer 10/15/2014 09:13'!testTwoTriangle	| triangle |	triangle := DelaunayElement withPoints: (OrderedCollection with: 0 @ 0 with: -4 @ 0 with: 0 @ -4).	self should: [ triangle area closeTo: 8.0 ].	self should: [ triangle perimeter closeTo: 13.656 ]! !!TestDelaunayElement methodsFor: 'testing' stamp: 'federicobalaguer 10/24/2014 11:32'!testNeighborElement	| t1 t2 t3 |	t1 := DelaunayElement withPoints: (OrderedCollection with: -1 @ -1 with: -1 @ -3 with: -3 @ 4).	t2 := DelaunayElement withPoints: (OrderedCollection with: -3 @ 0 with: -1 @ -3 with: -1 @ -1).	t3 := DelaunayElement withPoints: (OrderedCollection with: 1 @ 1 with: 1 @ 3 with: 3 @ -4).	self should: [ t1 isNeighborElement: t2 ].	self shouldnt: [ t1 isNeighborElement: t3 ]! !!TestDelaunayElement methodsFor: 'testing' stamp: 'federicobalaguer 10/15/2014 09:26'!testVertex	| t1 |	t1 := DelaunayElement withPoints: (OrderedCollection with: -1 @ -1 with: -1 @ -3 with: -3 @ 4).	self should: [ t1 isVertex: -1 @ -1 ].	self shouldnt: [ t1 isVertex: 1 @ 1 ]! !!TestDelaunayElement methodsFor: 'testing' stamp: 'federicobalaguer 10/24/2014 11:18'!testShareSide	| t1 t2 t3 |	t1 := DelaunayElement withPoints: (OrderedCollection with: -1 @ -1 with: -1 @ -3 with: -3 @ 4).	t2 := DelaunayElement withPoints: (OrderedCollection with: -3 @ 0 with: -1 @ -3 with: -1 @ -1).	t3 := DelaunayElement withPoints: (OrderedCollection with: 1 @ 1 with: 1 @ 3 with: 3 @ -4).	self should: [ t1 shareSide: t2 ].	self shouldnt: [ t1 shareSide: t3 ]! !!TestDelaunayElement methodsFor: 'testing' stamp: 'federicobalaguer 10/15/2014 09:10'!testOneTriangle	| triangle |	triangle := DelaunayElement withPoints: (OrderedCollection with: 0 @ 0 with: 4 @ 0 with: 0 @ 4).	self should: [ triangle area closeTo: 8.0  ].	self should: [ triangle perimeter closeTo: 13.656 ]! !!TestDelaunayElement methodsFor: 'testing' stamp: 'federicobalaguer 10/15/2014 09:09'!testFourTriangle	| triangle |	triangle := DelaunayElement withPoints: (OrderedCollection with: -1 @ -1 with: -1 @ -2 with: -3 @ 0).	self should: [ triangle area closeTo: 0.999999999999999 ].	self should: [ triangle perimeter closeTo: 6.06449510224598 ]! !!TestDelaunayElement methodsFor: 'testing' stamp: 'federicobalaguer 10/15/2014 09:11'!testSameAs	| t1 t2 |	t1 := DelaunayElement withPoints: (OrderedCollection with: -1 @ -1 with: -1 @ -2 with: -3 @ 0).	t2 := DelaunayElement withPoints: (OrderedCollection with: -3 @ 0 with: -1 @ -2 with: -1 @ -1).	self should: [ t1 sameAs: t2 ]! !TestCase subclass: #TestEdge	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'DelaunayTriangulation-Test'!!TestEdge commentStamp: '<historical>' prior: 0!!!TestEdge methodsFor: 'testing' stamp: 'federicobalaguer 11/11/2015 00:00'!testSetIntersection	| e1 e2 e3 s1 s2 |	e1 := Edge points: (OrderedCollection with: 1 @ 1 with: -1 @ -1).	e2 := Edge points: (OrderedCollection with: -2 @ -1 with: 1 @ 1).	e3 := Edge points: (OrderedCollection with: -1 @ -1 with: 1 @ 1).	s1 := Set with: e1 with: e2.	s2 := Set with: e3.	self should: [ (s1 intersection: s2) notEmpty ]! !!TestEdge methodsFor: 'testing' stamp: 'federicobalaguer 10/24/2014 14:29'!testEquality	| e1 e2 |	e1 := Edge points: (OrderedCollection with: 1 @ 1 with: -1 @ -1).	e2 := Edge points: (OrderedCollection with: -1 @ -1 with: 1 @ 1).	self should: [ e1 = e2 ]! !!TestEdge methodsFor: 'testing' stamp: 'federicobalaguer 10/24/2014 14:40'!testConstructors	| e1 e2 |	e1 := Edge p1: 1 @ 1 p2: -1 @ -1.	e2 := Edge points: (OrderedCollection with: -1 @ -1 with: 1 @ 1).	self should: [ e1 = e2 ]! !TestCase subclass: #TestMesh	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'DelaunayTriangulation-Test'!!TestMesh commentStamp: '<historical>' prior: 0!!!TestMesh methodsFor: 'testing' stamp: 'federicobalaguer 10/15/2014 09:30'!testOneTriangle	| mesh |	mesh := DelaunayMesh fromVertices: self oneTriangle.	self should: [ mesh area closeTo: 8.0 ].	self should: [ mesh perimeter closeTo: 13.656 ]! !!TestMesh methodsFor: 'testing' stamp: 'federicobalaguer 10/15/2014 09:30'!testThreeTriangles	| mesh |	mesh := DelaunayMesh fromVertices: self threeTriangles.	self should: [ mesh area closeTo: 24.0 ].	self should: [ mesh perimeter closeTo: 24.97 ]! !!TestMesh methodsFor: 'testing' stamp: 'federicobalaguer 10/15/2014 09:29'!testFourTriangles	| mesh |	mesh := DelaunayMesh fromVertices: self fourTriangles.	self should: [ mesh area closeTo: 32.0 ].	self should: [ mesh perimeter closeTo: 22.627 ]! !!TestMesh methodsFor: 'testing' stamp: 'federicobalaguer 10/15/2014 09:30'!testTwoTriangles	| mesh |	mesh := DelaunayMesh fromVertices: self twoTriangles.	self should: [ mesh area closeTo: 16.0 ].	self should: [ mesh perimeter closeTo: 13.656 * 2 ]! !!TestMesh methodsFor: 'private' stamp: 'FedericoBalaguer 5/15/2013 16:41'!twoTriangles	^ OrderedCollection		with: (Array with: 0 @ 0 with: 4 @ 0 with: 0 @ 4)		with: (Array with: 0 @ 0 with: -4 @ 0 with: 0 @ -4)! !!TestMesh methodsFor: 'private' stamp: 'FedericoBalaguer 5/20/2013 23:28'!threeTriangles	^ OrderedCollection		with: (Array with: 0 @ 0 with: 4 @ 0 with: 0 @ 4)		with: (Array with: 0 @ 0 with: -4 @ 0 with: 0 @ -4)		with: (Array with: 0 @ 0 with: -4 @ 0 with: 0 @ 4)! !!TestMesh methodsFor: 'private' stamp: 'FedericoBalaguer 5/15/2013 16:41'!oneTriangle	^ OrderedCollection with: (Array with: 0 @ 0 with: 4 @ 0 with: 0 @ 4)! !!TestMesh methodsFor: 'private' stamp: 'federicobalaguer 11/11/2015 00:06'!fourTriangles	^ OrderedCollection		with: (Array with: 0 @ 0 with: 4 @ 0 with: 0 @ 4)		with: (Array with: 0 @ 0 with: -4 @ 0 with: 0 @ -4)		with: (Array with: 0 @ 0 with: -4 @ 0 with: 0 @ 4)		with: (Array with: 0 @ 0 with: 4 @ 0 with: 0 @ -4)! !